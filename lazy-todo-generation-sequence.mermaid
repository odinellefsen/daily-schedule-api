sequenceDiagram
    participant User as Frontend User
    participant API as API Server
    participant Auth as Auth Middleware
    participant List as Todo List Handler
    participant TZ as Timezone Utils
    participant Gen as Habit Generation Service
    participant DB as Database
    participant FC as Flowcore
    participant Handler as Todo Handler

    Note over User, Handler: Lazy Todo Generation Flow (GET /api/todo/today)

    User->>+API: GET /api/todo/today
    Note right of User: Headers:<br/>Authorization: Bearer JWT<br/>X-Timezone: America/New_York

    API->>+Auth: requireAuth() middleware
    Auth->>Auth: Verify JWT token
    Auth->>API: Set c.userId = "user-123"
    Auth-->>-API: ✅ Authenticated

    API->>+List: registerListTodos handler
    
    List->>List: Extract timezone from header
    Note right of List: userTimezone = "America/New_York"
    
    List->>+TZ: getCurrentDateInTimezone(timezone)
    TZ->>TZ: Calculate current date in user TZ
    TZ-->>-List: "2024-01-15"
    
    Note over List, Handler: LAZY GENERATION BEGINS
    
    List->>+Gen: generateMissingHabitTodos(userId, "2024-01-15")
    
    Gen->>+DB: Query active habits for user
    DB-->>-Gen: Return habits array
    Note right of Gen: Found 3 habits:<br/>1. Take vitamins (daily)<br/>2. Exercise (weekly: Mon,Wed,Fri)<br/>3. Meal prep (weekly: Sun)
    
    loop For each habit
        Gen->>Gen: shouldGenerateForDate(habit, "2024-01-15")
        Note right of Gen: Check recurrence rules:<br/>- Daily: days % interval = 0?<br/>- Weekly: correct weekday & week?
        
        alt Habit is due today
            Gen->>+DB: upsertOccurrence()
            Note right of Gen: Check if occurrence exists<br/>for habit+date combo
            
            alt Occurrence doesn't exist
                DB->>DB: INSERT INTO occurrences
                DB-->>Gen: New occurrence created
            else Occurrence exists
                DB-->>Gen: Return existing occurrence
            end
            DB-->>-Gen: occurrence { id: "occ-123" }
            
            Gen->>Gen: calculateScheduledFor()
            Note right of Gen: Combine:<br/>date: "2024-01-15"<br/>time: "08:00"<br/>timezone: "America/New_York"<br/>→ UTC: "2024-01-15T13:00:00Z"
            
            Gen->>+FC: FlowcorePathways.write("todo.generated.v0")
            Note right of Gen: Event payload:<br/>{<br/>  habitId: "habit-123",<br/>  occurrenceId: "occ-123",<br/>  title: "Take vitamins",<br/>  scheduledFor: "2024-01-15T13:00:00Z"<br/>}
            
            FC->>+Handler: handleTodoGenerated(event)
            Handler->>Handler: Generate todo ID
            Handler->>+DB: INSERT INTO todos
            Note right of Handler: onConflictDoNothing:<br/>[userId, habitId, dueDate]
            DB-->>-Handler: ✅ Todo created (or skipped if exists)
            Handler-->>-FC: ✅ Event processed
            
            FC-->>-Gen: ✅ Event published
        else Habit not due today
            Note right of Gen: Skip this habit
        end
    end
    
    Gen-->>-List: Generation complete
    Note left of Gen: Results:<br/>success: 2, failed: 0
    
    Note over List, DB: QUERY TODAY'S TODOS
    
    List->>+TZ: getDayBoundsInTimezone(timezone)
    TZ->>TZ: Calculate day bounds
    Note right of TZ: Start: "2024-01-15T05:00:00Z"<br/>End: "2024-01-15T04:59:59Z"<br/>(UTC times for NY timezone)
    TZ-->>-List: { startOfDay, endOfDay }
    
    List->>+DB: SELECT todos WHERE
    Note right of List: userId = "user-123" AND<br/>scheduledFor >= startOfDay AND<br/>scheduledFor <= endOfDay
    DB-->>-List: Return todos array
    
    List->>List: Transform todos
    Note right of List: Calculate:<br/>- urgency (overdue/now/upcoming/later)<br/>- canStartNow<br/>- isOverdue
    
    List-->>-User: 200 OK
    Note left of List: Response:<br/>{<br/>  todos: [<br/>    {<br/>      id: "todo-789",<br/>      description: "Take vitamins",<br/>      scheduledFor: "2024-01-15T13:00:00Z",<br/>      urgency: "now",<br/>      completed: false<br/>    },<br/>    ...<br/>  ],<br/>  counts: {<br/>    total: 5,<br/>    completed: 2,<br/>    remaining: 3,<br/>    overdue: 1<br/>  }<br/>}
